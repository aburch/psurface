#ifndef GMSHIO_H
#define GMSHIO_H
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include <memory>
#include <tr1/memory>

#include "psurfaceAPI.h"
#ifdef PSURFACE_STANDALONE
namespace psurface { class Surface; }
#else
class Surface;
#endif


namespace psurface{
  enum NodeTypes{INTERIOR_NODE,
  INTERSECTION_NODE,
  CORNER_NODE,
  TOUCHING_NODE,
  GHOST_NODE};

template<class ctype,int dim>
class GmshIO{
    public:
    PSurface<dim,ctype>* par;
    public:
    GmshIO(PSurface<dim,ctype>* psurface);
    ///read psurface_convert from Gmsh file
    void readGmsh(Surface* surf, const std::string&  filename);

    private:
    void    readfile(FILE * file, int cnt, const char* format,
                  void* t1, void* t2, void* t3, void* t4,
                  void* t5 , void* t6, void* , void* t8,
                  void* t9 , void* t10 );
    void    skipline(FILE * file);
};
}
#endif
